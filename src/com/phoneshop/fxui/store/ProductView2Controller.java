/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.phoneshop.fxui.store;



import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import com.phoneshop.dao.SmartPhone;
import com.phoneshop.dao.SmartPhoneDAO;
import com.phoneshop.dao.SmartPhoneDAOImp;
import com.phoneshop.fxui.Navigator;
import com.phoneshop.model.UserName;
import io.github.palexdev.materialfx.controls.MFXButton;
import io.github.palexdev.materialfx.controls.MFXComboBox;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.animation.TranslateTransition;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.util.Duration;


public class ProductView2Controller implements Initializable {

    public MFXButton btnLogOut;
    private SmartPhoneDAO smartphonedao = new SmartPhoneDAOImp();

    private SmartPhone SmartPhone = null;

    @FXML
    private ImageView Img;

    @FXML
    private HBox imageGallery;

    @FXML
    private TextField searchBar;

    @FXML
    private Label txtUserName;

    @FXML
    private MFXButton btnLogout;

    @FXML
    private MFXButton btnSearch;

    @FXML
    private MFXButton HomeBtn;

    @FXML
    private MFXButton btnBack;
    
    @FXML
    private MFXButton btnCart;

    @FXML
    private Label lbName;

    @FXML
    private Label lbPrice;

    @FXML
    private Label lbScreen;

    @FXML
    private Label lbCamera;

    @FXML
    private Label lbSystem;

    @FXML
    private Label lbChip;

    @FXML
    private Label lbMemory;

    @FXML
    private Label lbBattery;
    
    @FXML
    private MFXButton btnAddToCart;
    
    @FXML
    private Spinner<Integer> Spinner;
    
    @FXML
    private MFXButton btnCartClick;

    @FXML
    private Label topBannerText;

    private int currentBannerIndex = 0;
    private Timeline bannerTimeline;

    private TranslateTransition marquee;


    @FXML
    private Button btnBannerLeft;

    @FXML
    private Button btnBannerRight;

    // Danh s√°ch c√¢u slogan/banner
    private List<String> bannerMessages = List.of(
            "S·∫¢N PH·∫®M CH√çNH H√ÉNG - CAM K·∫æT L·ªñI ƒê·ªîI LI·ªÄN - HOTLINE 1900.2091",
            "THU C≈® GI√Å CAO TO√ÄN B·ªò S·∫¢N PH·∫®M",
            "MI·ªÑN PH√ç V·∫¨N CHUY·ªÇN TO√ÄN QU·ªêC - HO√ÄN TI·ªÄN 200% N·∫æU H√ÄNG GI·∫¢"
    );

    private final String[] bannerTexts = {
            "S·∫¢N PH·∫®M CH√çNH H√ÉNG",
            "CAM K·∫æT L·ªñI ƒê·ªîI LI·ªÄN",
            "HOTLINE 1900.2091",
            "MI·ªÑN PH√ç V·∫¨N CHUY·ªÇN TO√ÄN QU·ªêC"
    };

    private List<String> imageLinks;
    private int currentImageIndex = 0;



    @FXML
    void HomeClick(ActionEvent event) throws IOException {
        Navigator.getInstance().goToStore("");
    }

    @FXML
    void btnBackClick(ActionEvent event) throws IOException {
        if (!UserName.search.isEmpty()) {
            Navigator.getInstance().goToStore(UserName.search);
        } else if (!UserName.sbb.isEmpty()) {
            Navigator.getInstance().goToStore("");
        } else {
            Navigator.getInstance().goToStore("");
        }
    }

    @FXML
    void btnLogOut(ActionEvent event) throws IOException {
        Navigator.getInstance().goToLogin();
    }

    @FXML
    void btnSearchClick(ActionEvent event) throws IOException {
        UserName.sbb = "";
        Navigator.getInstance().goToStore(searchBar.getText());
        UserName.search = searchBar.getText();
    }
    
//    @FXML
//    void cbbMfgClick(ActionEvent event) throws IOException {
//        UserName.sbb = cbbMfg.getValue().toString();
//        Navigator.getInstance().goToStore("");
//    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        // Kh·ªüi ƒë·ªông banner ch·∫°y
        topBannerText.setText(bannerMessages.get(currentBannerIndex));
        startMarquee();

        txtUserName.setText(UserName.username);
        int initialValue = 1;
        SpinnerValueFactory<Integer> valueFactory
                = //
                new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 99999, initialValue);

        Spinner.setValueFactory(valueFactory);
        System.out.println("#ProductView2Controller initialized!");
    }



    public void setSmartPhoneByName(String name) {
        ObservableList<SmartPhone> smartphone = smartphonedao.selectByName(name);

        SmartPhone phone = smartphone.get(0);
        this.SmartPhone = phone;
        UserName.id = phone.getProductID();

        // ‚úÖ ·∫¢nh ch√≠nh
        try {
            String firstImage = phone.getFirstImageLink();
            InputStream is = getClass().getClassLoader().getResourceAsStream(firstImage);
            if (is != null) {
                Img.setImage(new Image(is));
            }
        } catch (Exception e) {
            System.out.println("Kh√¥ng load ƒë∆∞·ª£c ·∫£nh ch√≠nh: " + e.getMessage());
        }

        // ‚úÖ ·∫¢nh ph·ª•
        imageLinks = phone.getImageLinks();
        currentImageIndex = 0;
        showImageAt(currentImageIndex);


        // ‚úÖ Th√¥ng tin s·∫£n ph·∫©m
        lbName.setText(phone.getName());
        lbPrice.setText(phone.getPrice() + "$");
        lbScreen.setText(phone.getScreen());
        lbCamera.setText(phone.getCamera());
        lbSystem.setText(phone.getSystem());
        lbChip.setText(phone.getChip());
        lbMemory.setText(phone.getMemory());
        lbBattery.setText(phone.getBattery());
    }


    @FXML
    private void btnAddToCartClick(ActionEvent event) {
        try {
            int cartID = UserName.CartID;
            int productID = UserName.id;
            int amount = Spinner.getValue();

            System.out.println("üõí Th√™m v√†o gi·ªè h√†ng:");
            System.out.println("   - Cart ID: " + cartID);
            System.out.println("   - Product ID: " + productID);
            System.out.println("   - Amount: " + amount);

            // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (cartID <= 0) {
                showErrorAlert("L·ªói gi·ªè h√†ng", "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                return;
            }

            if (productID <= 0) {
                showErrorAlert("L·ªói s·∫£n ph·∫©m", "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m.");
                return;
            }

            if (amount <= 0) {
                showErrorAlert("L·ªói s·ªë l∆∞·ª£ng", "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.");
                return;
            }

            if (smartphonedao.isProductInCart(cartID, productID)) {
                // S·∫£n ph·∫©m ƒë√£ c√≥ -> c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
                System.out.println("üìù S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng...");
                int currentAmount = smartphonedao.selectAmount(cartID, productID);
                boolean updated = smartphonedao.updateCart(cartID, productID, currentAmount + amount);
                if (updated) {
                    showSuccessAlert("C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng!", 
                        "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè h√†ng.");
                } else {
                    System.out.println("‚ùå C·∫≠p nh·∫≠t gi·ªè h√†ng th·∫•t b·∫°i.");
                    showErrorAlert("L·ªói c·∫≠p nh·∫≠t", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng.");
                }
            } else {
                // S·∫£n ph·∫©m ch∆∞a c√≥ -> th√™m m·ªõi
                System.out.println("‚ûï Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng...");
                boolean inserted = smartphonedao.addtocartdetail(cartID, productID, amount);
                if (inserted) {
                    showSuccessAlert("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!", 
                        "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng c·ªßa b·∫°n.");
                } else {
                    System.out.println("‚ùå Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i.");
                    showErrorAlert("L·ªói th√™m v√†o gi·ªè h√†ng", "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
                }
            }

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng: " + e.getMessage());
            e.printStackTrace();
            showErrorAlert("L·ªói h·ªá th·ªëng", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        }
    }

    private void showSuccessAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private void showErrorAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private void showImageAt(int index) {
        if (imageLinks == null || imageLinks.isEmpty()) return;

        String link = imageLinks.get(index);
        try {
            InputStream is = getClass().getClassLoader().getResourceAsStream(link);
            if (is != null) {
                Img.setImage(new Image(is));
            }
        } catch (Exception e) {
            System.out.println("‚ùå Kh√¥ng th·ªÉ load ·∫£nh: " + link);
        }

        // C·∫≠p nh·∫≠t ch·ªâ s·ªë hi·ªÉn th·ªã
        if (lbImageIndex != null) {
            lbImageIndex.setText((index + 1) + " / " + imageLinks.size());
        }
    }

    @FXML
    private Label lbImageIndex;

    @FXML
    private void handleNextImage() {
        if (imageLinks != null && !imageLinks.isEmpty()) {
            currentImageIndex = (currentImageIndex + 1) % imageLinks.size();
            showImageAt(currentImageIndex);
        }
    }

    @FXML
    private void handlePrevImage() {
        if (imageLinks != null && !imageLinks.isEmpty()) {
            currentImageIndex = (currentImageIndex - 1 + imageLinks.size()) % imageLinks.size();
            showImageAt(currentImageIndex);
        }
    }




    @FXML
    private void btnCartClick(ActionEvent event) throws IOException {
        Navigator.getInstance().goToShoppingCart(UserName.CartID);
    }

    private void startMarquee() {
        double bannerWidth = 1200; // Banner r·ªông 1200px
        double textWidth = topBannerText.getText().length() * 7; // ∆Ø·ªõc t√≠nh ƒë·ªô d√†i text

        marquee = new TranslateTransition(Duration.seconds(8), topBannerText);
        marquee.setFromX(bannerWidth);
        marquee.setToX(-textWidth);
        marquee.setCycleCount(TranslateTransition.INDEFINITE);
        marquee.play();
    }

    @FXML
    private void onBannerLeftClick() {
        marquee.pause();
        marquee.setRate(-1); // Ch·∫°y ng∆∞·ª£c
        marquee.play();
    }

    @FXML
    private void onBannerRightClick() {
        marquee.pause();
        marquee.setRate(1); // Ch·∫°y thu·∫≠n
        marquee.play();
    }

    private void updateBannerText() {
        topBannerText.setText(bannerTexts[currentBannerIndex]);
        currentBannerIndex = (currentBannerIndex + 1) % bannerTexts.length;
    }

    private void startBannerAnimation() {
        bannerTimeline = new Timeline(
                new KeyFrame(Duration.seconds(0), e -> updateBannerText()),
                new KeyFrame(Duration.seconds(1.5))
        );
        bannerTimeline.setCycleCount(Animation.INDEFINITE);
        bannerTimeline.play();
    }
}
