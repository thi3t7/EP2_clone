package com.phoneshop.fxui.store;

import com.phoneshop.dao.SmartPhone;
import com.phoneshop.dao.SmartPhoneDAO;
import com.phoneshop.dao.SmartPhoneDAOImp;
import com.phoneshop.fxui.Navigator;
import com.phoneshop.model.UserName;
import io.github.palexdev.materialfx.controls.MFXButton;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class ShoppingCartController implements Initializable {

    private final SmartPhoneDAO smartphoneDAO = new SmartPhoneDAOImp();

    @FXML private TextField searchBar;
    @FXML private Label txtUserName;
    @FXML private ImageView Img;
    @FXML private Label totalLabel;   // ‚úÖ T·ªïng ti·ªÅn h√†ng
    @FXML private Label finalTotalLabel; // ‚úÖ T·ªïng ti·ªÅn cu·ªëi c√πng
    @FXML private Label itemCountLabel; // ‚úÖ S·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    @FXML private MFXButton btnBack;
    @FXML private MFXButton btnLogout;
    @FXML private Label topBannerText;
    @FXML private VBox cartList;
    @FXML private ComboBox<String> paymentMethodComboBox;
    @FXML private MFXButton btnCheckout;

    private final SimpleIntegerProperty total = new SimpleIntegerProperty(0);
    private final SimpleIntegerProperty itemCount = new SimpleIntegerProperty(0);

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        txtUserName.setText(UserName.username);
        System.out.println("üõí Cart ID: " + UserName.CartID);

        // ‚úÖ Bind t·ªïng ti·ªÅn v·ªõi label
        total.addListener((obs, oldVal, newVal) -> {
            finalTotalLabel.setText(String.format("%,d VNƒê", newVal.intValue())); // Ch·ªâ hi·ªÉn th·ªã t·ªïng c·ªông
        });

        // ‚úÖ Bind s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        itemCount.addListener((obs, oldVal, newVal) -> {
            itemCountLabel.setText(String.valueOf(newVal.intValue()));
        });

        // ‚úÖ Th√™m ph∆∞∆°ng th·ª©c thanh to√°n v√†o ComboBox
        paymentMethodComboBox.getItems().addAll(
                "Thanh to√°n khi nh·∫≠n h√†ng (COD)",
                "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
                "V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)"
        );
        paymentMethodComboBox.getSelectionModel().selectFirst();

        // ‚úÖ Load gi·ªè h√†ng
        loadCartItems(UserName.CartID);
    }

    private void loadCartItems(int cartId) {
        cartList.getChildren().clear();
        ObservableList<SmartPhone> items = smartphoneDAO.selectAllCart(cartId);
        total.set(0); // Reset t·ªïng ti·ªÅn
        itemCount.set(0); // Reset s·ªë l∆∞·ª£ng

        try {
            for (SmartPhone phone : items) {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/store/ProductInfo.fxml"));
                AnchorPane pane = loader.load();

                ProductInfoController ctrl = loader.getController();
                ctrl.setData(phone);
                ctrl.initialize(phone.getAmount());

                pane.getProperties().put("controller", ctrl);
                // Checkbox m·∫∑c ƒë·ªãnh b·ªè ch·ªçn
                ctrl.checkbox.setSelected(false);

                // Tick ch·ªçn s·∫£n ph·∫©m
                ctrl.checkbox.selectedProperty().addListener((obs, oldVal, newVal) -> {
                    int itemTotal = parsePrice(ctrl.total_price.getText());
                    if (newVal) {
                        total.set(total.get() + itemTotal);
                        itemCount.set(itemCount.get() + 1);
                    } else {
                        total.set(total.get() - itemTotal);
                        itemCount.set(itemCount.get() - 1);
                    }
                });

                // Thay ƒë·ªïi s·ªë l∆∞·ª£ng khi tick ch·ªçn
                ctrl.amount.valueProperty().addListener((obs, oldVal, newVal) -> {
                    int price = parsePrice(ctrl.price.getText());
                    ctrl.total_price.setText(String.format("%,d VNƒê", newVal * price));
                    if (ctrl.checkbox.isSelected()) {
                        int delta = (newVal - oldVal) * price;
                        total.set(total.get() + delta);
                    }
                });

                cartList.getChildren().add(pane);
            }
        } catch (IOException e) {
            System.out.println("‚ùå Error loading cart items: " + e.getMessage());
            showErrorAlert("L·ªói t·∫£i gi·ªè h√†ng", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng.");
        }
    }

    private int parsePrice(String priceText) {
        return Integer.parseInt(priceText.replaceAll("[^\\d]", ""));
    }

    private void showErrorAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR, content, ButtonType.OK);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.showAndWait();
    }

    // ===== S·ª± ki·ªán ng∆∞·ªùi d√πng =====

    @FXML
    private void btnSearchClick(ActionEvent e) throws IOException {
        UserName.search = searchBar.getText();
        Navigator.getInstance().goToStore(UserName.search);
    }

    @FXML
    private void btnCheckoutClick(ActionEvent e) {
        if (total.get() == 0) {
            Alert alert = new Alert(Alert.AlertType.WARNING, 
                "B·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o ƒë·ªÉ thanh to√°n!", ButtonType.OK);
            alert.setTitle("Gi·ªè h√†ng tr·ªëng");
            alert.setHeaderText(null);
            alert.showAndWait();
            return;
        }

        String paymentMethod = paymentMethodComboBox.getValue();
        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION,
                "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c: " + paymentMethod +
                        "\nT·ªïng ti·ªÅn: " + finalTotalLabel.getText() +
                        "\nS·ªë l∆∞·ª£ng s·∫£n ph·∫©m: " + itemCountLabel.getText() + " s·∫£n ph·∫©m" +
                        "\n\nX√°c nh·∫≠n thanh to√°n?",
                ButtonType.YES, ButtonType.NO);
        confirm.setTitle("X√°c nh·∫≠n thanh to√°n");
        confirm.setHeaderText(null);
        confirm.showAndWait();

        if (confirm.getResult() == ButtonType.YES) {
            try {
                // ‚úÖ 1. X·ª≠ l√Ω thanh to√°n trong DB
                smartphoneDAO.ordered(UserName.CartID);

                // ‚úÖ 2. X√≥a c√°c s·∫£n ph·∫©m ƒë√£ tick trong giao di·ªán
                cartList.getChildren().removeIf(node -> {
                    ProductInfoController ctrl = (ProductInfoController) node.getProperties().get("controller");
                    return ctrl != null && ctrl.checkbox.isSelected();
                });

                // ‚úÖ 3. Reset t·ªïng ti·ªÅn v√† s·ªë l∆∞·ª£ng
                total.set(0);
                itemCount.set(0);

                Alert success = new Alert(Alert.AlertType.INFORMATION, 
                    "‚úÖ Thanh to√°n th√†nh c√¥ng!\n\nC√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.\nC·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!", 
                    ButtonType.OK);
                success.setTitle("Thanh to√°n th√†nh c√¥ng");
                success.setHeaderText(null);
                success.showAndWait();
                
            } catch (Exception ex) {
                System.out.println("‚ùå Error during checkout: " + ex.getMessage());
                showErrorAlert("L·ªói thanh to√°n", "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }

    @FXML
    private void btnBackClick(ActionEvent e) throws IOException {
        if (!UserName.search.isEmpty()) Navigator.getInstance().goToStore(UserName.search);
        else Navigator.getInstance().goToStore("");
    }

    @FXML
    private void btnLogOut(ActionEvent e) throws IOException {
        Navigator.getInstance().goToLogin();
    }

    public void initialize(int cartId) {
        // Overload n·∫øu Navigator c·∫ßn truy·ªÅn cartId
    }
}
